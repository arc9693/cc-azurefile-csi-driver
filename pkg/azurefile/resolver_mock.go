// Code generated by MockGen. DO NOT EDIT.
// Source: azurefile/resolver.go

// Package azurefile is a generated GoMock package.
package azurefile

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResolver is a mock of Resolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// ResolveIPAddr mocks base method.
func (m *MockResolver) ResolveIPAddr(network, address string) (*net.IPAddr, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveIPAddr", network, address)
	ret0, _ := ret[0].(*net.IPAddr)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveIPAddr indicates an expected call of ResolveIPAddr.
func (mr *MockResolverMockRecorder) ResolveIPAddr(network, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveIPAddr", reflect.TypeOf((*MockResolver)(nil).ResolveIPAddr), network, address)
}
